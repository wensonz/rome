#!/usr/bin/env node

/**
 * This module contains the implementation of the HTTP API server for project
 * ROME.
 * 
 * @module rome
 */
var condotti = require('condotti'),
    caligula = require('caligula');

function bootstrap(config) {
    /*
    config = C.lang.clone(caligula.defaults.cli);
    value = C.namespace.call(config, 'dotti.router.params.0.value');
    */
    var C = null;
    
    C = new condotti.Condotti();
    C.lang.merge(config, C.lang.clone(caligula.defaults.cli));
    
    config.modules.push('caligula.components.orca.base');
    
    C.lang.merge(config, {
        'condotti': { 'loader': {
            'baseUrl': process.cwd(),
            'paths': { 
                'caligula': caligula.path, 
                'caligula.components.orca': C.natives.path.resolve(__dirname, 
                                                                   '../lib') 
            }
        }}
    });
    
    C.lang.merge(config, {
        'dotti': { 
            'router': { 'params': { '0': { 'value': {
                '': 'handlers.orca'
            }}}},
            'handlers.orca': {
                'type': 'caligula.handlers.OrcaHandler',
                'params': { '0': { 'value': {
                    'server': 'http://localhost:8080'
                }}}
            }
        }
    });
    return new condotti.Condotti(config.condotti);
}

function main() {
    var C = null,
        config = {};
    
    C = bootstrap(config);
    C.use(config.modules, function (error, unused) {
        var factory = null,
            app = null;
            
        if (error) {
            process.stderr.write(error.toString());
            // TODO: exit code handling
            process.exit(1);
        }
        
        factory = new C.di.DottiFactory(config.dotti);
        app = factory.get('app');
        // TODO: callback handling when app stopped
        app.run();
    });
}

if (require.main === module) {
    main();
}