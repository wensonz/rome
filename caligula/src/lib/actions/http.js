/**
 * This module contains the implementation of the HttpAction class, which is
 * the child class of Action, and is used when handling HTTP incoming request.
 *
 * @module caligula.actions.http
 */
Condotti.add('caligula.actions.http', function (C) {
    /**
     * This HttpAction class is the child class of Action, and is used to
     * represent the incoming HTTP request internally. It is generated by the 
     * HttpContextualizer based on the incoming request to be processed and is 
     * a sandbox that is supopsed to keep all related data, just like the 
     * "request" structure in Apache module development.
     *
     * @class HttpAction
     * @constructor
     * @param {String} name the name of the action
     * @param {Router} router the router which is to handle this action
     * @param {HttpRequest} request the incoming HTTP request
     * @param {HttpResponse} response the generated response to be sent to the
     *                                client
     */
    function HttpAction (router, request, response) {
        /* inheritance */
        this.super(router);
        
        /**
         * The incoming HTTP request
         *
         * @property request
         * @type HttpRequest
         */
        this.request = request;
        
        /**
         * The generated HTTP response
         *
         * @property response
         * @type HttpResponse
         */
        this.response = response;
        
    }
    
    C.lang.inherit(HttpAction, C.caligula.actions.Action);
    
    /**
     * End the current request processing flow, and return the passed-in data to
     * the client. Note that this method is expected to be called when the
     * processing successfully completes by the correct handler, otherwise
     * method "error" should be called instead.
     *
     * @method done
     * @param {Object} data the data to be returned to the client
     * @param {Object} meta the meta data that may affect some property of the
     *                      HTTP response to be returned, such as the status
     *                      code, etc.
     */
    HttpAction.prototype.done = function (data, meta) {
        // TODO: check the data
        var content = null,
            body = null,
            status = (meta && meta.status)|| 200;
            
        content = {
            result: data
        };
        body = JSON.stringify(content, null, 4);
        
        this.response.writeHead(status, {
            'Content-Type': 'application/json',
            'Content-Length': body.length
        });
        this.response.end(body);
    };
    
    /**
     * The same functionality with method "done", except that it is expected to
     * be called when some error occurs during the request processing.
     *
     * @method error
     * @param {Error} error the error object indicates what happened when this
     *                      error occurred
     * @param {Object} meta the meta data for this error response
     */
    HttpAction.prototype.error = function (error, meta) {
        var content = null,
            body = null,
            status = (meta && meta.status) || error.status || 500;
        
        // TODO: check the type of error
        
        content = {
            error: {
                code: error.code,
                message: error.message
            }
        };
        
        body = JSON.stringify(content, null, 4);
        
        this.response.writeHead(status, {
            'Content-Type': 'application/json',
            'Content-Length': body.length
        });
        
        this.response.end(body);
    };

    /**
     * Clone this HTTP action
     *
     * @method clone
     * @return {HttpAction} the action cloned
     */
    HttpAction.prototype.clone = function () {
        var action = new HttpAction(this.router_),
            key = null;

        for (key in this) {
            // clone the properties belongs to this action, but not private
            if (this.hasOwnProperty(key) && ('_' !== key[key.length - 1])) {
                action[key] = this[key];
            }
        }

        return action;
    };
    
    C.namespace('caligula.actions').HttpAction = HttpAction;
    
    
}, '0.0.1', { requires: ['caligula.actions.base'] });
